{"version":3,"sources":["components/Note.js","components/services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","textAlign","App","useState","notes","setNote","newNote","SetNewNote","showall","setshowall","errormessage","seterrormessage","notestoshow","filter","useEffect","console","log","noteService","initialnote","length","map","key","find","x","changednote","n","catch","error","setTimeout","z","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d2abf00.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note= ({note,toggleImportance})=>\n{\n    const label = note.important ? 'undo importance' : 'make important'\n\n    return(\n        <li className = 'note'>\n            {note.content}\n            <button onClick = {toggleImportance}>{label} </button>\n        </li>\n\n    )\n}\n\nexport default Note ","import axios from 'axios'\n\n// const baseurl = 'http://localhost:3001/api/notes'\nconst baseurl = '/api/notes'\n\nconst getall = () => {\n    const request = axios.get(baseurl)\n\n\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n      }\n\n    return request.then(response => response.data.concat(nonExisting) )\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseurl, newObject)\n\n\n    return request.then(response => response.data)\n\n}\n\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseurl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst failedpromise = () => {\n    return axios.get(`${baseurl}asd`).then((res) => res.data)\n}\n\n\nexport default {\n    getall, create, update, failedpromise\n}\n","import React from 'react'\n\nconst Notification= ({message})=>\n{\n    if(message === null)\n    {\n        return null\n    }\n    return(\n        <div className = 'error'>\n            {message}\n        </div>\n\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer= ()=>\n{\n    const footerstyle = {\n        color:'green',\n        fontStyle:'italic',\n        fontSize:20,\n        textAlign: 'center',\n       \n    }\n\n    return(\n       <div style = {footerstyle}>\n           <br />\n           <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n\n       </div>\n\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Notes from './components/Note'\n\nimport noteService from './components/services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\n\n\n\nconst App = () => {\n    // console.log(props)\n    const [notes, setNote] = useState([])\n    const [newNote, SetNewNote] = useState('Add new note.')\n    const [showall, setshowall] = useState(true)\n    const [errormessage,seterrormessage] = useState(null)\n\n    // console.log(notes)\n\n    // const notestoshow = showall ? notes : notes.filter(note => note.important === true)\n    const notestoshow = showall ? notes : notes.filter(note => note.important)\n\n    const HandleNoteChange = (event) => {\n        // console.log(event.target)\n        console.log(event.target.value)\n        SetNewNote(event.target.value)\n    }\n\n    const toggleImportance = (id) => {\n        console.log(`Importance of ${id}  needs to be toggle`)\n\n        // const url = `http://localhost:3001/notes/${id}`\n        const note = notes.find(x => x.id === id)\n        const changednote = { ...note, important: !note.important }\n\n        // axios\n        // .put(url,changednote)\n        noteService\n            .update(id, changednote)\n            .then(initialnote => {\n                console.log(initialnote)\n                setNote(notes.map(n => n.id !== id ? n : initialnote))\n            })\n            .catch(\n                error =>\n                {\n                    seterrormessage(`Note '${note.content}' was already removed from server`)\n                    setTimeout(() => {\n                        seterrormessage(null)\n                    }, 5000);\n                    // alert(`the note \"${note.content}\" was not in server`)\n                    setNote(notes.filter(z=>z.id !== id))\n                }\n            )\n\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            // id: notes.length + 1\n        }\n        // setNote(notes.concat(noteObject))\n\n        // console.log(notes)\n\n        // axios\n        // .post('http://localhost:3001/notes',noteObject)\n        noteService\n            .create(noteObject)\n            .then(initialnote => {\n                setNote(notes.concat(initialnote))\n                SetNewNote('')\n\n            })\n\n\n\n    }\n\n    useEffect(() => {\n        console.log(\"Effect\")\n\n        // axios\n        //     .get('http://localhost:3001/notes')\n        noteService\n            .getall()\n            .then(\n                (initialnote) => {\n                    // console.log(response)\n                    console.log(\"Promise fulfilled\")\n                    setNote(initialnote)\n\n                }\n            )\n    }, [])\n\n    console.log('render', notes.length, 'notes')\n\n//     const fail = () => {\n//         console.log(\"entering   fail function.\")\n//         noteService\n//         .failedpromise()\n//         .then(() => console.log('failedpromise: tue'))\n//         .catch((error) => console.log('Return failed promise',error))\n    \n\n\n//     return (<></>)\n// }\n\nreturn (\n    <div>\n        {/* <div>\n            promise failing\n                <>\n                {fail()}\n            </>\n        </div> */}\n\n        <h1>Notes</h1>\n        <Notification message = {errormessage} />\n        <div>\n            <button onClick={() => setshowall(!showall)} >\n                show {showall ? 'important' : 'all'}\n            </button>\n        </div>\n        <ul>\n            {notestoshow.map((note) => <Notes key={note.id} note={note} toggleImportance={() => toggleImportance(note.id)} />\n\n            )}\n        </ul>\n\n        <form onSubmit={addNote}>\n            <input value={newNote} onChange={HandleNoteChange}>\n\n            </input>\n            <button type=\"submit\">\n                save\n                </button>\n        </form>\n\n        <Footer />\n    </div>\n)\n\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport  './index.css'\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}